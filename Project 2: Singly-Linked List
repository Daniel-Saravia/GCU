//Daniel Saravia
//Project 2: Singly-Linked List
//CST-201-WF300A
//1/31/23
//This is my own work
#include <iostream>
using namespace std;
template<typename T>
class myList{
public:
    //1: Default Constructor
    myList()
    {
        head = nullptr;
    }
    //2: Copy Constructor
    myList(const myList &list){
        head = nullptr;
        node* temp = list.head;
        while (temp) {
            addNodeHelper(temp->data);
            temp = temp->next;
        }
    }
    //struct for the node
    struct node {
        int data;
        node* next;
    };
    // varibles for node
    struct node* head = NULL;
    struct node* tail = NULL;
    
    void insertFront(T newData) {
        struct node* newNode = new node;
        if (head == NULL) {
            tail = newNode;
        }
        newNode->data = newData;
        newNode->next = head;
        head = newNode;
    }
    void insertEnd(T newData) {
        struct node* newNode = new node;
        newNode->data = newData;
        newNode->next = NULL;
        tail->next = newNode;
        tail = newNode;
    }
    void display() {
        struct node* temp;
        temp = head;
        while (temp != NULL) {
            cout << temp->data << " ";
            temp = temp->next;
        }
        cout << "\n";
    }
    void deleteHead() {
        struct node* temp;
        temp = head;
        head = temp->next;
        delete temp;
    }
    /*void empty() {

        while (head != NULL) {
            struct node* temp;
            temp = head;
            head = temp->next;
            delete temp;
        }
    }*/
    //3: front
    void front() {
        int n = 0;
        node* current = head;
        if (current == nullptr) {
            cout << "There is no head \n";
        }
        else if (current != nullptr) { 
            int data = current->data;
            cout << data;
        }
    }
    //4: back
    void back() {
        node* current = head;
        while (current != nullptr && current->next != nullptr) {
            current = current->next;
        }

        if (current != nullptr) {
            int data = current->data;
            cout << data;
        }
    }
    //5: insert
    void insert(int value) {
        node* newNode = new node{ value , head };
        head = newNode;
    }
    //6: pop_front
    void pop_front() {
        if (head == NULL) {
            cout << "Empty List \n";
            return;
        }
            
        node* temp = head;
        head = head->next;
        delete temp;
    }
    //6: pop_back
    void pop_back() {
        if (head == NULL) {
            cout << "Empty List \n";
            return;
        }

        if (head->next == NULL) { // Only one element
            delete head;
            head = NULL;
            return;
        }

        node* temp = head;
        node *prev = NULL;
        while (temp->next != NULL) {
            prev = temp;
            temp = temp->next;
        }

        prev->next = NULL;
        delete temp;
    }
    //7: empty
    void empty(){
        if (head == NULL) {
            cout << "Empty List \n";
            return;
        }
        cout << "Is not Empty\n";
    }
    //8: size
    int size(){
        int count = 0;
        node* temp = head;
        while (temp != NULL) {
            count++;
            temp = temp->next;
        }
        return count;
    }
    //9: reverse
    void reverse(){
        node* prev = NULL;
        node* curr = head;
        node* next;
        while (curr != NULL) {
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        head = prev;
    }
    //10: merge
    myList merge(myList list1, myList list2) {
        node* temp1 = list1.head;
        node* temp2 = list2.head;
        myList result;
        while (temp1 && temp2) {
            if (temp1->data <= temp2->data) {
                result.addNodeHelper(temp1->data);
                temp1 = temp1->next;
            }
            else {
                result.addNodeHelper(temp2->data);
                temp2 = temp2->next;
            }
        }
        while (temp1) {
            result.addNodeHelper(temp1->data);
            temp1 = temp1->next;
        }
        while (temp2) {
            result.addNodeHelper(temp2->data);
            temp2 = temp2->next;
        }
        return result;
    }

    void addNodeHelper(int data) {
        node* temp = new node;
        temp->data = data;
        temp->next = head;
        head = temp;
    }
    void driver() {
        cout << "Start...\n";
        cout << "list_1 = ";
        //create 2 lists
        myList<int> list_1;
        myList<int> merge;

        //fill list_1
        list_1.insertFront(11);
        list_1.insertFront(9);
        list_1.insert(8);
        list_1.insertFront(10);

        list_1.display();

        //Test copy constrctor
        cout << "Test for copy constructor...\n";
        myList<int> list_2 = list_1;
        cout << "list_2 = ";
        list_2.display();
        cout << "\n";

        //Test for front()
        cout << "Test for front()...\n";
        list_1.front();
        cout << "\n";
        cout << "\n";

        //Test for back()
        cout << "Test for back()...\n";
        list_1.back();
        cout << "\n";
        cout << "\n";

        //Test for insert(val)
        cout << "Test for insert(4)...\n";
        list_1.insert(4);
        list_1.display();
        cout << "\n";

        //Test for pop_front
        cout << "Test for pop_front()...\n";
        list_1.pop_front();
        list_1.display();
        cout << "\n";

        //Test for pop_back
        cout << "Test for pop_back()...\n";
        list_1.pop_back();
        list_1.display();
        cout << "\n";

        //Test for empty()
        cout << "Test for empty()...\n";
        list_1.empty();
        cout << "\n";

        //Test for size()
        cout << "Test for size()...\n";
        int size = list_1.size();
        cout << "size = " << size << "\n";
        cout << "\n";

        //Test for reverse()
        cout << "Test for reverse()...\n";
        list_1.reverse();
        list_1.display();
        cout << "\n";

        //Test for merge()
        cout << "Test for merge()...\n";
        cout << "list_1 + list_2 = ";
        merge = list_1.merge(list_1, list_2);
        merge.display();
        cout << "End of program... \n";
    }
};
//tiny main
int main() {
    myList<int> run;
    run.driver();
    return 0;
};

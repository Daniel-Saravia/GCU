#Gabriel R Marcelino
#Daniel Saravia
#CLC Memory Cache Sim & MIPS
#2/14/23
#Write a program using the above notes write a MIPS 32 Assembly program, which includes a 
#recursive procedure to print the Fibonacci sequence, defined as follows:

#Let F(n) be the nth element (where n >= 0) in the sequence:

#· If n < 2, then F(n) = 1

#· Otherwise, F(n) = F(n-1) + F(n-2)

.text
main:
# ask user to input non-negative number
la $a0,prompt   
li $v0,4
syscall

#Read the number/input
li $v0,5
syscall

# n to $t2
move $t2,$v0    

# Call fibonnacci #n
move $a0,$t2
move $v0,$t2
# check
li $t0, 2
blt $t2, $t0, lessthen2

jal fib     # call fib (n)
move $t3,$v0    # result is in $t3

# Output results and n
la $a0,result   # Print F_
li $v0,4
syscall

# Print n
move $a0,$t2    
li $v0,1
syscall

# Print =
la $a0,result2  
li $v0,4
syscall

# Print the answer
move $a0,$t3    
li $v0,1
syscall

# Print '\n'
la $a0,endl 
li $v0,4
syscall

# End program
li $v0,10
syscall

# method for less then 2 
lessthen2:
la $a0,smaller_then2
li $v0,4
syscall
# Set $v0 to 10 (exit)
li $v0, 10       
syscall

fib:
# Compute and return fibonacci number
beqz $a0,zero   # if n=0 return 0
beq $a0,1,one   # if n=1 return 1

#Calling to fib(n-1)
#storing return address on stack
sub $sp,$sp,4   
sw $ra,0($sp)

sub $a0,$a0,1   #n-1
jal fib     #fib(n-1)
add $a0,$a0,1

lw $ra,0($sp)   #restoring return address from stack
add $sp,$sp,4

#Push return value to stack
sub $sp,$sp,4   
sw $v0,0($sp)
#Calling fib(n-2)

#storing return address on stack
sub $sp,$sp,4   
sw $ra,0($sp)

#n-2
sub $a0,$a0,2
#fib(n-2)
jal fib     
add $a0,$a0,2

#restoring return address from stack
lw $ra,0($sp)   
add $sp,$sp,4
#---------------
#Pop return value from stack
lw $s7,0($sp)   
add $sp,$sp,4

# f(n - 2)+fib(n-1)
add $v0,$v0,$s7 
# decrement/next in stack
jr $ra 

zero:
li $v0,0
jr $ra
one:
li $v0,1
jr $ra

.data
prompt: .asciiz "This program calculates Fibonacci sequence with recursive functions.\nEnter a non-negative number: "
result: .asciiz "F_"
result2: .asciiz " = "
smaller_then2: .asciiz "Because n is less then 2, n = 1"
endl: .asciiz "\n"

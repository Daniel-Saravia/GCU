#Gabriel R Marcelino
#Daniel Saravia
#CLC Memory Cache Sim & MIPS
#2/14/23
#Write a program using the above notes write a MIPS 32 Assembly program, which includes a 
#recursive procedure to print the Fibonacci sequence, defined as follows:

#Let F(n) be the nth element (where n >= 0) in the sequence:

#· If n < 2, then F(n) = 1

#· Otherwise, F(n) = F(n-1) + F(n-2)

.text
main:
# Prompt user to input non-negative number
la $a0,prompt   
li $v0,4
syscall

li $v0,5    #Read the number(n)
syscall

move $t2,$v0    # n to $t2

# Call function to get fibonnacci #n
move $a0,$t2
move $v0,$t2
# check
li $t0, 2
blt $t2, $t0, lessthen2

jal fib     # call fib (n)
move $t3,$v0    # result is in $t3

# Output message and n
la $a0,result   # Print F_
li $v0,4
syscall

move $a0,$t2    # Print n
li $v0,1
syscall

la $a0,result2  # Print =
li $v0,4
syscall

move $a0,$t3    # Print the answer
li $v0,1
syscall

la $a0,endl # Print '\n'
li $v0,4
syscall

# End program
li $v0,10
syscall

# method for less then 2 
lessthen2:
la $a0,smaller_then2  # Print =
li $v0,4
syscall
li $v0, 10       # Set $v0 to 10 (exit)
syscall

fib:
# Compute and return fibonacci number
beqz $a0,zero   # if n=0 return 0
beq $a0,1,one   # if n=1 return 1

#Calling fib(n-1)
sub $sp,$sp,4   #storing return address on stack
sw $ra,0($sp)

sub $a0,$a0,1   #n-1
jal fib     #fib(n-1)
add $a0,$a0,1

lw $ra,0($sp)   #restoring return address from stack
add $sp,$sp,4


sub $sp,$sp,4   #Push return value to stack
sw $v0,0($sp)
#Calling fib(n-2)
sub $sp,$sp,4   #storing return address on stack
sw $ra,0($sp)

sub $a0,$a0,2   #n-2
jal fib     #fib(n-2)
add $a0,$a0,2

lw $ra,0($sp)   #restoring return address from stack
add $sp,$sp,4
#---------------
lw $s7,0($sp)   #Pop return value from stack
add $sp,$sp,4

add $v0,$v0,$s7 # f(n - 2)+fib(n-1)
jr $ra # decrement/next in stack

zero:
li $v0,0
jr $ra
one:
li $v0,1
jr $ra

.data
prompt: .asciiz "This program calculates Fibonacci sequence with recursive functions.\nEnter a non-negative number: "
result: .asciiz "F_"
result2: .asciiz " = "
smaller_then2: .asciiz "Because n is less then 2, n = 1"
endl: .asciiz "\n"
